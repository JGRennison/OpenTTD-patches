; This file is part of OpenTTD.
; OpenTTD is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
; OpenTTD is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
; See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with OpenTTD. If not, see <http://www.gnu.org/licenses/>.
;

; These are settings that are company-wide. Meaning that if 1 player in a
; company changes them, it changes for all players.

[pre-amble]
static void UpdateAllServiceInterval(int32_t new_value);
static bool CanUpdateServiceInterval(VehicleType type, int32_t &new_value);
static void UpdateServiceInterval(VehicleType type, int32_t new_value);
static std::pair<StringParameter, StringParameter> SettingsValueAbsolute(const IntSettingDesc &sd, int32_t value);
static std::pair<StringParameter, StringParameter> ServiceIntervalSettingsValueText(const IntSettingDesc &sd, int32_t value);
static int32_t GetDefaultServiceInterval(const IntSettingDesc &sd, VehicleType type);
static std::tuple<int32_t, uint32_t> GetServiceIntervalRange(const IntSettingDesc &sd);

static const SettingTable _company_settings{
[post-amble]
};
[templates]
SDT_BOOL = SDT_BOOL(CompanySettings, $var,        SettingFlags({$flags}), $def,                        $str, $strhelp, $strval, $pre_cb, $post_cb, $str_cb, $help_cb, $val_cb, $def_cb,            $from, $to, $extver, $cat, $guiproc, $startup, $patxname),
SDT_VAR  =  SDT_VAR(CompanySettings, $var, $type, SettingFlags({$flags}), $def, $min, $max, $interval, $str, $strhelp, $strval, $pre_cb, $post_cb, $str_cb, $help_cb, $val_cb, $def_cb, $range_cb, $from, $to, $extver, $cat, $guiproc, $startup, $patxname),
SDT_NULL =  SDT_NULL($length, $from, $to, $extver),

[validation]
SDT_VAR = static_assert($max <= MAX_$type, "Maximum value for CompanySettings.$var exceeds storage size");

[defaults]
flags    = SettingFlag::PerCompany
interval = 0
str      = STR_NULL
strhelp  = STR_CONFIG_SETTING_NO_EXPLANATION_AVAILABLE_HELPTEXT
strval   = STR_NULL
pre_cb   = nullptr
post_cb  = nullptr
str_cb   = nullptr
help_cb  = nullptr
val_cb   = nullptr
def_cb   = nullptr
range_cb = nullptr
guiproc  = nullptr
load     = nullptr
from     = SL_MIN_VERSION
to       = SL_MAX_VERSION
cat      = SC_ADVANCED
startup  = false
extver   = SlXvFeatureTest()
patxname = nullptr



[SDT_BOOL]
var      = engine_renew
def      = true
str      = STR_CONFIG_SETTING_AUTORENEW_VEHICLE
strhelp  = STR_CONFIG_SETTING_AUTORENEW_VEHICLE_HELPTEXT
cat      = SC_BASIC

[SDT_VAR]
var      = engine_renew_months
type     = SLE_INT16
flags    = SettingFlag::PerCompany
def      = 6
min      = -12
max      = 12
str      = STR_CONFIG_SETTING_AUTORENEW_MONTHS
strhelp  = STR_CONFIG_SETTING_AUTORENEW_MONTHS_HELPTEXT
strval   = STR_CONFIG_SETTING_AUTORENEW_MONTHS_VALUE_BEFORE
val_cb   = SettingsValueAbsolute

[SDT_VAR]
var      = engine_renew_money
type     = SLE_UINT
flags    = SettingFlag::PerCompany, SettingFlag::GuiCurrency
def      = 100000
min      = 0
max      = 2000000
str      = STR_CONFIG_SETTING_AUTORENEW_MONEY
strhelp  = STR_CONFIG_SETTING_AUTORENEW_MONEY_HELPTEXT
strval   = STR_JUST_CURRENCY_LONG

[SDT_BOOL]
var      = renew_keep_length
def      = false

;; allow_autoreplace_to_self
[SDT_NULL]
length   = 1
extver   = SlXvFeatureTest(XSLFTO_AND, XSLFI_SPRINGPP, 2)

[SDT_BOOL]
var      = vehicle.servint_ispercent
def      = false
str      = STR_CONFIG_SETTING_SERVINT_ISPERCENT
strhelp  = STR_CONFIG_SETTING_SERVINT_ISPERCENT_HELPTEXT
post_cb  = UpdateAllServiceInterval

[SDT_VAR]
var      = vehicle.servint_trains
type     = SLE_UINT16
flags    = SettingFlag::PerCompany, SettingFlag::GuiZeroIsSpecial
def      = DEF_SERVINT_DAYS_TRAINS
min      = MIN_SERVINT_PERCENT
max      = MAX_SERVINT_DAYS
interval = 1
str      = STR_CONFIG_SETTING_SERVINT_TRAINS
strhelp  = STR_CONFIG_SETTING_SERVINT_TRAINS_HELPTEXT
strval   = STR_CONFIG_SETTING_SERVINT_VALUE_DAYS
pre_cb   = [](auto &new_value) { return CanUpdateServiceInterval(VEH_TRAIN, new_value); }
post_cb  = [](auto new_value) { UpdateServiceInterval(VEH_TRAIN, new_value); }
def_cb   = [](auto &sd) { return GetDefaultServiceInterval(sd, VEH_TRAIN); }
val_cb   = ServiceIntervalSettingsValueText
range_cb = GetServiceIntervalRange

[SDT_VAR]
var      = vehicle.servint_roadveh
type     = SLE_UINT16
flags    = SettingFlag::PerCompany, SettingFlag::GuiZeroIsSpecial
def      = DEF_SERVINT_DAYS_ROADVEH
min      = MIN_SERVINT_PERCENT
max      = MAX_SERVINT_DAYS
interval = 1
str      = STR_CONFIG_SETTING_SERVINT_ROAD_VEHICLES
strhelp  = STR_CONFIG_SETTING_SERVINT_ROAD_VEHICLES_HELPTEXT
strval   = STR_CONFIG_SETTING_SERVINT_VALUE_DAYS
pre_cb   = [](auto &new_value) { return CanUpdateServiceInterval(VEH_ROAD, new_value); }
post_cb  = [](auto new_value) { UpdateServiceInterval(VEH_ROAD, new_value); }
def_cb   = [](auto &sd) { return GetDefaultServiceInterval(sd, VEH_ROAD); }
val_cb   = ServiceIntervalSettingsValueText
range_cb = GetServiceIntervalRange

[SDT_VAR]
var      = vehicle.servint_ships
type     = SLE_UINT16
flags    = SettingFlag::PerCompany, SettingFlag::GuiZeroIsSpecial
def      = DEF_SERVINT_DAYS_SHIPS
min      = MIN_SERVINT_PERCENT
max      = MAX_SERVINT_DAYS
interval = 1
str      = STR_CONFIG_SETTING_SERVINT_SHIPS
strhelp  = STR_CONFIG_SETTING_SERVINT_SHIPS_HELPTEXT
strval   = STR_CONFIG_SETTING_SERVINT_VALUE_DAYS
pre_cb   = [](auto &new_value) { return CanUpdateServiceInterval(VEH_SHIP, new_value); }
post_cb  = [](auto new_value) { UpdateServiceInterval(VEH_SHIP, new_value); }
def_cb   = [](auto &sd) { return GetDefaultServiceInterval(sd, VEH_SHIP); }
val_cb   = ServiceIntervalSettingsValueText
range_cb = GetServiceIntervalRange

[SDT_VAR]
var      = vehicle.servint_aircraft
type     = SLE_UINT16
flags    = SettingFlag::PerCompany, SettingFlag::GuiZeroIsSpecial
def      = DEF_SERVINT_DAYS_AIRCRAFT
min      = MIN_SERVINT_PERCENT
max      = MAX_SERVINT_DAYS
interval = 1
str      = STR_CONFIG_SETTING_SERVINT_AIRCRAFT
strhelp  = STR_CONFIG_SETTING_SERVINT_AIRCRAFT_HELPTEXT
strval   = STR_CONFIG_SETTING_SERVINT_VALUE_DAYS
pre_cb   = [](auto &new_value) { return CanUpdateServiceInterval(VEH_AIRCRAFT, new_value); }
post_cb  = [](auto new_value) { UpdateServiceInterval(VEH_AIRCRAFT, new_value); }
def_cb   = [](auto &sd) { return GetDefaultServiceInterval(sd, VEH_AIRCRAFT); }
val_cb   = ServiceIntervalSettingsValueText
range_cb = GetServiceIntervalRange

[SDT_BOOL]
base     = CompanySettings
var      = vehicle.auto_timetable_by_default
flags    = SettingFlag::PerCompany, SettingFlag::Patch
def      = false
str      = STR_CONFIG_SETTING_AUTO_TIMETABLE_BY_DEFAULT
strhelp  = STR_CONFIG_SETTING_AUTO_TIMETABLE_BY_DEFAULT_HELPTEXT
patxname = ""vehicle.auto_timetable_by_default""

[SDT_BOOL]
base     = CompanySettings
var      = vehicle.auto_separation_by_default
flags    = SettingFlag::PerCompany, SettingFlag::Patch
def      = true
str      = STR_CONFIG_SETTING_TIMETABLE_SEPARATION_BY_DEFAULT
strhelp  = STR_CONFIG_SETTING_TIMETABLE_SEPARATION_BY_DEFAULT_HELPTEXT
patxname = ""vehicle.auto_separation_by_default""

[SDT_VAR]
base     = CompanySettings
var      = auto_timetable_separation_rate
type     = SLE_UINT8
flags    = SettingFlag::PerCompany, SettingFlag::Patch
def      = 40
min      = 5
max      = 100
interval = 10
str      = STR_CONFIG_SETTING_TIMETABLE_SEPARATION_RATE
strhelp  = STR_CONFIG_SETTING_TIMETABLE_SEPARATION_RATE_HELPTEXT
strval   = STR_CONFIG_SETTING_PERCENTAGE
cat      = SC_EXPERT
patxname = ""auto_timetable_separation_rate""

[SDT_VAR]
base     = CompanySettings
var      = timetable_autofill_rounding
type     = SLE_UINT16
flags    = SettingFlag::PerCompany, SettingFlag::GuiZeroIsSpecial, SettingFlag::Patch
def      = 0
min      = 0
max      = 1000
interval = 10
str      = STR_CONFIG_SETTING_TIMETABLE_AUTOFILL_ROUNDING_TICKS
strhelp  = STR_CONFIG_SETTING_TIMETABLE_AUTOFILL_ROUNDING_TICKS_HELPTEXT
strval   = STR_CONFIG_SETTING_TIMETABLE_AUTOFILL_ROUNDING_TICKS_VALUE
cat      = SC_EXPERT
patxname = ""timetable_autofill_rounding""

[SDT_VAR]
base     = CompanySettings
var      = order_occupancy_smoothness
type     = SLE_UINT8
flags    = SettingFlag::PerCompany, SettingFlag::Patch
def      = 75
min      = 0
max      = 100
interval = 10
str      = STR_CONFIG_OCCUPANCY_SMOOTHNESS
strhelp  = STR_CONFIG_OCCUPANCY_SMOOTHNESS_HELPTEXT
strval   = STR_CONFIG_SETTING_PERCENTAGE
cat      = SC_EXPERT
patxname = ""order_occupancy_smoothness""

[SDT_BOOL]
base     = CompanySettings
var      = infra_others_buy_in_depot[0]
flags    = SettingFlag::PerCompany, SettingFlag::Patch
def      = false
str      = STR_CONFIG_SETTING_INFRA_OTHERS_BUY_IN_DEPOT_RAIL
patxname = ""infra_sharing.infra_others_buy_in_depot.rail""

[SDT_BOOL]
base     = CompanySettings
var      = infra_others_buy_in_depot[1]
flags    = SettingFlag::PerCompany, SettingFlag::Patch
def      = false
str      = STR_CONFIG_SETTING_INFRA_OTHERS_BUY_IN_DEPOT_ROAD
patxname = ""infra_sharing.infra_others_buy_in_depot.road""

[SDT_BOOL]
base     = CompanySettings
var      = infra_others_buy_in_depot[2]
flags    = SettingFlag::PerCompany, SettingFlag::Patch
def      = false
str      = STR_CONFIG_SETTING_INFRA_OTHERS_BUY_IN_DEPOT_WATER
patxname = ""infra_sharing.infra_others_buy_in_depot.water""

[SDT_BOOL]
base     = CompanySettings
var      = infra_others_buy_in_depot[3]
flags    = SettingFlag::PerCompany, SettingFlag::Patch
def      = false
str      = STR_CONFIG_SETTING_INFRA_OTHERS_BUY_IN_DEPOT_AIR
patxname = ""infra_sharing.infra_others_buy_in_depot.air""


[SDT_BOOL]
base     = CompanySettings
var      = advance_order_on_clone
flags    = SettingFlag::PerCompany, SettingFlag::Patch
def      = false
str      = STR_CONFIG_SETTING_ADVANCE_ORDER_ON_CLONE
strhelp  = STR_CONFIG_SETTING_ADVANCE_ORDER_ON_CLONE_HELPTEXT
patxname = ""advance_order_on_clone""

[SDT_BOOL]
base     = CompanySettings
var      = copy_clone_add_to_group
flags    = SettingFlag::PerCompany, SettingFlag::Patch
def      = true
str      = STR_CONFIG_SETTING_COPY_CLONE_ADD_TO_GROUP
strhelp  = STR_CONFIG_SETTING_COPY_CLONE_ADD_TO_GROUP_HELPTEXT
patxname = ""copy_clone_add_to_group""

[SDT_BOOL]
base     = CompanySettings
var      = remain_if_next_order_same_station
flags    = SettingFlag::PerCompany, SettingFlag::Patch
def      = true
str      = STR_CONFIG_SETTING_REMAIN_IF_NEXT_ORDER_SAME_STATION
strhelp  = STR_CONFIG_SETTING_REMAIN_IF_NEXT_ORDER_SAME_STATION_HELPTEXT
patxname = ""remain_if_next_order_same_station""

[SDT_VAR]
base     = CompanySettings
var      = default_sched_dispatch_duration
type     = SLE_UINT16
flags    = SettingFlag::PerCompany, SettingFlag::GuiZeroIsSpecial, SettingFlag::Patch
def      = 0
min      = 0
max      = 10080
interval = 30
str      = STR_CONFIG_SETTING_SCHEDULED_DISPATCH_DEFAULT_DURATION
strhelp  = STR_CONFIG_SETTING_SCHEDULED_DISPATCH_DEFAULT_DURATION_HELPTEXT
strval   = STR_CONFIG_SETTING_SCHEDULED_DISPATCH_DEFAULT_DURATION_VALUE
cat      = SC_ADVANCED
patxname = ""default_sched_dispatch_duration""

[SDT_VAR]
base     = CompanySettings
var      = old_simulated_wormhole_signals
type     = SLE_UINT8
flags    = SettingFlag::PerCompany
def      = 4
min      = 1
max      = 16
str      = STR_CONFIG_SETTING_SIMULATE_SIGNALS
strhelp  = STR_CONFIG_SETTING_SIMULATE_SIGNALS_HELPTEXT
strval   = STR_CONFIG_SETTING_SIMULATE_SIGNALS_VALUE
cat      = SC_ADVANCED
extver   = SlXvFeatureTest(XSLFTO_AND, XSLFI_SIG_TUNNEL_BRIDGE, 1, 9)
patxname = ""simulated_wormhole_signals""
